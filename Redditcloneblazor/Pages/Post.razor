@page "/"
@inject PostService PostService
@using Model;
@using Service;
@if (posts == null)
{
    <p><em>Indlæser...</em></p>
}
else
{
    <ul class="post-list">
        @foreach (var post in posts.OrderByDescending(p => p.CreatedAt)) // Sort posts by CreatedAt descending
        {
            <li class="post-item">
                <div class="post-header">
                    <img src="/avatar.png" alt="Avatar" class="avatar" />
                    <div class="post-title">
                        <strong>@post.Title</strong> af @post.Author
                    </div>
                </div>
                <div class="post-content">
                    <p>@post.Content</p> <!-- This line displays the content of the post -->
                </div>
                <div class="post-votes">
                    <p>Upvotes: @post.Upvotes | Downvotes: @post.Downvotes</p>
                    <button @onclick="() => UpvotePost(post.Id)">Upvote</button>
                    <button @onclick="() => DownvotePost(post.Id)">Downvote</button>
                </div>

                <h4>Kommentarer:</h4>
                <ul class="comment-list">
                    @if (post.Comments.Count == 0)
                    {
                        <li>No comments yet.</li>
                    }
                    else
                    {
                        foreach (var comment in post.Comments)
                        {
                            <li class="comment-item">
                                <p>@comment.Text</p>
                                <p>Forfatter: @comment.Author | Stemmer: @comment.Upvotes - @comment.Downvotes</p>
                                <button @onclick="() => UpvoteComment(post.Id, comment.Id)">Upvote Kommentar</button>
                                <button @onclick="() => DownvoteComment(post.Id, comment.Id)">Downvote Kommentar</button>
                            </li>
                        }
                    }
                </ul>

                <h5>Tilføj en kommentar:</h5>
                <EditForm Model="newComments[post.Id]" OnValidSubmit="() => AddComment(post.Id)">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                      
                        <InputTextArea @bind-Value="newComments[post.Id].Text" />
                    </div>
                    <div>
                        <label>Forfatter:</label>
                        <InputText @bind-Value="newComments[post.Id].Author" />
                    </div>
                    <button type="submit">Tilføj Kommentar</button>
                </EditForm>
            </li>
        }
    </ul>
}

@code {
    private List<Post>? posts;
    private Dictionary<int, Comment> newComments = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        posts = await PostService.GetPostsAsync();
        foreach (var post in posts)
        {
            newComments[post.Id] = new Comment(); // Initialize a new Comment for each post
        }
    }

    // Upvote Post
    private async Task UpvotePost(int postId)
    {
        await PostService.UpvotePostAsync(postId);
        var post = posts.FirstOrDefault(p => p.Id == postId);
        if (post != null)
        {
            post.Upvotes++;
        }
    }

    // Downvote Post
    private async Task DownvotePost(int postId)
    {
        await PostService.DownvotePostAsync(postId);
        var post = posts.FirstOrDefault(p => p.Id == postId);
        if (post != null)
        {
            post.Downvotes++;
        }
    }

    // Upvote Comment
    private async Task UpvoteComment(int postId, int commentId)
    {
        await PostService.UpvoteCommentAsync(postId, commentId);
        var post = posts.FirstOrDefault(p => p.Id == postId);
        var comment = post?.Comments.FirstOrDefault(c => c.Id == commentId);
        if (comment != null)
        {
            comment.Upvotes++;
        }
    }

    // Downvote Comment
    private async Task DownvoteComment(int postId, int commentId)
    {
        await PostService.DownvoteCommentAsync(postId, commentId);
        var post = posts.FirstOrDefault(p => p.Id == postId);
        var comment = post?.Comments.FirstOrDefault(c => c.Id == commentId);
        if (comment != null)
        {
            comment.Downvotes++;
        }
    }

    // Add Comment
    private async Task AddComment(int postId)
    {
        var newComment = newComments[postId]; // Use the new comment for the specific post
        newComment.PostId = postId;
        await PostService.AddCommentAsync(postId, newComment);

        // Find post and add the new comment to the list
        var post = posts.FirstOrDefault(p => p.Id == postId);
        if (post != null)
        {
            post.Comments.Add(new Comment
                {
                    Text = newComment.Text,
                    Author = newComment.Author,
                    Upvotes = 0,
                    Downvotes = 0
                });
        }

        // Reset new comment
        newComments[postId] = new Comment();
    }
}



<style>
    .post-list {
        list-style-type: none; /* Remove bullet points */
        padding: 0;
    }

    .post-item {
        border: 1px solid #ccc; /* Light border for posts */
        border-radius: 5px; /* Rounded corners */
        padding: 10px; /* Padding around content */
        margin-bottom: 15px; /* Spacing between posts */
        background-color: #f9f9f9; /* Light background color */
    }

    .post-header {
        font-size: 1.2em; /* Larger font for title */
        margin-bottom: 5px; /* Spacing below title */
    }

    .post-votes {
        margin-bottom: 10px; /* Space below vote buttons */
    }

    .comment-list {
        list-style-type: none; /* Remove bullet points for comments */
        padding: 0;
        margin: 10px 0; /* Margin around the comment list */
    }

    .comment-item {
        border-top: 1px solid #eee; /* Divider between comments */
        padding: 5px 0; /* Padding for comments */
    }

    h4 {
        margin-top: 10px; /* Space before comments section */
    }

    h5 {
        margin-top: 15px; /* Space before add comment section */
    }

    button {
        margin-right: 5px; /* Space between buttons */
    }
</style>
