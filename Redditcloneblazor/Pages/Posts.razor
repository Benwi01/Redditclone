@page "/"
@inject PostService PostService
@using Model;
@using Service;

@if (posts == null)
{
    <p><em>Indlæser...</em></p>
}
else
{
    @if (selectedPost == null)
    {
        <ul class="post-list">
            @foreach (var post in posts.OrderByDescending(p => p.CreatedAt)) // Sort posts by CreatedAt descending
            {
                <li class="post-item" @onclick="() => SelectPost(post)">
                    <div class="post-header">
                        <img src="/avatar.png" alt="Avatar" class="avatar" />
                        <div class="post-title">
                            <strong>@post.Title</strong> af @post.Author
                        </div>
                    </div>
                </li>
            }
        </ul>
    }
    else
    {
        <div class="post-item">
            <button @onclick="DeselectPost">Tilbage</button> <!-- Button to go back to all posts -->

            <div class="post-header">
                <img src="/avatar.png" alt="Avatar" class="avatar" />
                <div class="post-title">
                    <strong>@selectedPost.Title</strong> af @selectedPost.Author
                </div>
            </div>

            <div class="post-content">
                <p>@selectedPost.Content</p>
            </div>

            <div class="post-votes">
                <p>Upvotes: @selectedPost.Upvotes | Downvotes: @selectedPost.Downvotes</p>
                <button @onclick="() => UpvotePost(selectedPost.Id)">Upvote</button>
                <button @onclick="() => DownvotePost(selectedPost.Id)">Downvote</button>
            </div>

            <h4>Kommentarer:</h4>
            <ul class="comment-list">
                @if (selectedPost.Comments.Count == 0)
                {
                    <li>No comments yet.</li>
                }
                else
                {
                    foreach (var comment in selectedPost.Comments)
                    {
                        <li class="comment-item">
                            <p>@comment.Text</p>
                            <p>Forfatter: @comment.Author | Stemmer: @comment.Upvotes - @comment.Downvotes</p>
                            <button @onclick="() => UpvoteComment(selectedPost.Id, comment.Id)">Upvote Kommentar</button>
                            <button @onclick="() => DownvoteComment(selectedPost.Id, comment.Id)">Downvote Kommentar</button>
                        </li>
                    }
                }
            </ul>

            <h5>Tilføj en kommentar:</h5>
            <EditForm Model="newComments[selectedPost.Id]" OnValidSubmit="() => AddComment(selectedPost.Id)">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div>
                    <InputTextArea @bind-Value="newComments[selectedPost.Id].Text" />
                </div>
                <div>
                    <label>Forfatter:</label>
                    <InputText @bind-Value="newComments[selectedPost.Id].Author" />
                </div>
                <button type="submit">Tilføj Kommentar</button>
            </EditForm>
        </div>
    }
}

@code {
    private List<Post>? posts;
    private Post? selectedPost; // Store the selected post here
    private Dictionary<int, Comment> newComments = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        posts = await PostService.GetPostsAsync();
        foreach (var post in posts)
        {
            newComments[post.Id] = new Comment(); // Initialize a new Comment for each post
        }
    }

    private void SelectPost(Post post)
    {
        selectedPost = post;
    }

    private void DeselectPost()
    {
        selectedPost = null;
    }

    // Upvote Post
    private async Task UpvotePost(int postId)
    {
        await PostService.UpvotePostAsync(postId);
        var post = posts.FirstOrDefault(p => p.Id == postId);
        if (post != null)
        {
            post.Upvotes++;
        }
    }

    // Downvote Post
    private async Task DownvotePost(int postId)
    {
        await PostService.DownvotePostAsync(postId);
        var post = posts.FirstOrDefault(p => p.Id == postId);
        if (post != null)
        {
            post.Downvotes++;
        }
    }

    // Upvote Comment
    private async Task UpvoteComment(int postId, int commentId)
    {
        await PostService.UpvoteCommentAsync(postId, commentId);
        var post = posts.FirstOrDefault(p => p.Id == postId);
        var comment = post?.Comments.FirstOrDefault(c => c.Id == commentId);
        if (comment != null)
        {
            comment.Upvotes++;
        }
    }

    // Downvote Comment
    private async Task DownvoteComment(int postId, int commentId)
    {
        await PostService.DownvoteCommentAsync(postId, commentId);
        var post = posts.FirstOrDefault(p => p.Id == postId);
        var comment = post?.Comments.FirstOrDefault(c => c.Id == commentId);
        if (comment != null)
        {
            comment.Downvotes++;
        }
    }

    // Add Comment
    private async Task AddComment(int postId)
    {
        var newComment = newComments[postId];
        newComment.PostId = postId;
        await PostService.AddCommentAsync(postId, newComment);

        var post = posts.FirstOrDefault(p => p.Id == postId);
        if (post != null)
        {
            post.Comments.Add(new Comment
                {
                    Text = newComment.Text,
                    Author = newComment.Author,
                    Upvotes = 0,
                    Downvotes = 0
                });
        }

        newComments[postId] = new Comment();
    }
}

<style>
    .post-list {
        list-style-type: none;
        padding: 0;
    }

    .post-item {
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 15px;
        background-color: #f9f9f9;
        transition: background-color 0.3s ease; /* Add transition for smooth hover effect */
    }

        .post-item:hover {
            background-color: #e0e0e0; /* Change background color on hover */
            cursor: pointer; /* Change cursor to pointer when hovering */
        }

    .post-header {
        font-size: 1.2em;
        margin-bottom: 5px;
    }

    .post-votes {
        margin-bottom: 10px;
    }

    .comment-list {
        list-style-type: none;
        padding: 0;
        margin: 10px 0;
    }

    .comment-item {
        border-top: 1px solid #eee;
        padding: 5px 0;
    }

    h4 {
        margin-top: 10px;
    }

    h5 {
        margin-top: 15px;
    }

    button {
        margin-right: 5px;
    }
</style>

